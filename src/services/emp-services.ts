import { eq } from 'drizzle-orm';
import { employees } from '@/schema/employees';
import { employeeImages } from '@/schema/employees';
import { db } from '@/utils/db'; 
import { BackendError } from '@/utils/errors';
import { uploadOnCloudinary } from '@/utils/cloudinary';


export async function getEmployeeById(id: number) {
  console.log("Called getEmployeeById in services");
  const [employee] = await db
    .select()
    .from(employees)
    .where(eq(employees.id, id))
    .limit(1); 
  return employee; 
}


export async function addEmployeeService(employee: any) {
  // console.log("Called addEmployeeService in services");
  const { id, name, section, date, time_in,file } = employee;
  // console.log("Employess details in services",employee);
  if (!file || !file.path) {
    throw new BackendError('INTERNAL_ERROR', {
      message: 'Failed to get profile image local path in services.',
    });
  }
  // console.log("Geting local file path");
  const profile_image_localPath = file.path;
  // console.log("Got local file path");
  // console.log("profile Image Path",profile_image_localPath);
  if (!profile_image_localPath) {
    throw new BackendError('INTERNAL_ERROR', {
      message: 'Failed to get profile image local path in services employee',
    });
  }
  // console.log("Uploading on cloudinary");
  const profile_image = await uploadOnCloudinary(profile_image_localPath)
  // console.log("Upload done in cloudinary");
  if (!profile_image) {
    throw new BackendError('INTERNAL_ERROR', {
      message: 'Failed to upload in cloudinary in services employee',
    });
  }
  const [newEmployee] = await db
    .insert(employees)
    .values({
      id,
      name,
      section,
      date,
      timeIn: time_in, 
      profileImageUrl: profile_image.url || " ", 
    })
    .returning({
      id: employees.id,
      name: employees.name,
      section: employees.section,
      date: employees.date,
      timeIn: employees.timeIn,
      profileImage: employees.profileImageUrl,
    });
    //giving back the uesr the updated details

  if (!newEmployee) {
    throw new BackendError('INTERNAL_ERROR', {
      message: 'Failed to add employee',
    });
  }

  return { employee: newEmployee }; 
}



export async function uploadEmployeeImagesService(empId: number, files: Express.Multer.File[]) {
  // Upload all files to Cloudinary
  const uploadedUrls = await uploadMultipleImagesToCloudinary(files);

  // Prepare data for database insertion
  const imageRecords = uploadedUrls.map((url) => ({
    empId,
    empImagesUrl: url,
    uploadedAt: new Date(),
  }));

  // Insert into the database
  const insertedImages = await db
    .insert(employeeImages)
    .values(imageRecords)
    .returning();  // Do not manually specify the id field here, it will be generated by the DB

  if (!insertedImages || insertedImages.length === 0) {
    throw new BackendError("INTERNAL_ERROR", {
      message: "Failed to save uploaded images to the database.",
    });
  }

  return insertedImages;  // Return the inserted images
}

// Helper function to upload multiple images to Cloudinary
async function uploadMultipleImagesToCloudinary(files: Express.Multer.File[]): Promise<string[]> {
  const uploadedImageUrls: string[] = [];

  for (const file of files) {
    const uploadedImage = await uploadOnCloudinary(file.path); // Call Cloudinary utility

    if (!uploadedImage || !uploadedImage.url) {
      throw new BackendError("BAD_REQUEST", {
        message: 'Failed to upload image to Cloudinary.',
      });
    }

    uploadedImageUrls.push(uploadedImage.url); // Collect the URLs
  }

  return uploadedImageUrls;
}